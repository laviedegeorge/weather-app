{"version":3,"sources":["getWeather.js","index.js"],"names":["getCityInfo","API_KEY","getCityData","city","url","lat","long","console","log","Promise","res","err","fetch","then","json","catch","displayData","document","getElementById","value","obj","dataObj","innerHTML","Math","round","main","temp","name","setAttribute","weather","icon","description","clouds","all","humidity","wind","speed","getCity","searchBtn","addEventListener","suggestedLocation","querySelectorAll","forEach","li","e","target","getLocationByCords","position","coords","latitude","toFixed","longitude","navigator","geolocation","getCurrentPosition","alert"],"mappings":";;;AA0BeA,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EA1Bf,IAAMC,EAAU,mCAEVC,EAAc,WAACC,IACfC,EADeD,EAAO,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAAIE,EAAM,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,KAAOC,EAAO,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,KAQ3C,OALLF,EADW,KAATD,EACmDA,+CAAAA,OAAAA,EAAcF,WAAAA,OAAAA,EAAnE,iBAEuDI,iDAAAA,OAAAA,EAAWC,SAAAA,OAAAA,EAAcL,WAAAA,OAAAA,EAAhF,iBAEFM,QAAQC,IAAIJ,GACL,IAAIK,QAAQ,SAACC,EAAKC,GACvBC,MAAMR,GACHS,KAAK,SAAAH,GAAOA,OAAAA,EAAII,SAChBD,KAAKH,GACLK,MAAMJ,MAIPX,EAAc,SAACG,EAAMa,EAAaX,EAAKC,GAC3CJ,EAAYC,EAAME,EAAKC,GACpBO,KAAKG,GACLD,MAAM,SAACJ,GACNJ,QAAQC,IAAIG,EAAI,wBAIPX,EAAAA,EAAAA,QAAAA,QAAAA;;AC2Bd,aArDD,QAAA,sBACA,IAAA,EAAA,EAAA,QAAA,iBAoDC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAlDDiB,SAASC,eAAe,cAAcC,MAAQ,GAE9C,IAAMH,EAAc,SAAAI,GACZC,IAAAA,EAAUD,EASTC,OARPJ,SAASC,eAAe,OAAOI,UAAYC,KAAKC,MAAMJ,EAAIK,KAAKC,MAC/DT,SAASC,eAAe,YAAYI,UAAYF,EAAIO,KACpDV,SAASC,eAAe,gBAAgBU,aAAa,MAA2CR,oCAAAA,OAAAA,EAAIS,QAAQ,GAAGC,KAA/G,SACAb,SAASC,eAAe,uBAAuBI,UAAaF,EAAIS,QAAQ,GAAGE,YAC3Ed,SAASC,eAAe,UAAUI,UAAeF,GAAAA,OAAAA,EAAIY,OAAOC,IAA5D,KACAhB,SAASC,eAAe,YAAYI,UAAeF,GAAAA,OAAAA,EAAIK,KAAKS,SAA5D,KACAjB,SAASC,eAAe,QAAQI,UAAeF,GAAAA,OAAAA,EAAIe,KAAKC,MAAxD,QACA7B,QAAQC,IAAIa,GACLA,GAGHgB,EAAU,WACRlC,IAAAA,EAAOc,SAASC,eAAe,cAAcC,OACvChB,EAAAA,EAAAA,SAAAA,EAAMa,IAKdsB,EAAYrB,SAASC,eAAe,UAC1CoB,EAAUC,iBAAiB,QAASF,GAGpC,IAAMG,EAAoBvB,SAASwB,iBAAiB,0BACpDD,EAAkBE,QAAQ,SAAAC,GACxBA,EAAGJ,iBAAiB,QAAS,SAAAK,GACrBzB,IAAAA,EAAQyB,EAAEC,OAAOvB,WACXH,EAAAA,EAAAA,SAAAA,EAAOH,OAQvB,IAAM8B,EAAqB,SAACC,GACpB5C,IACAE,EAAM0C,EAASC,OAAOC,SAASC,QAAQ,GACvC5C,EAAOyC,EAASC,OAAOG,UAAUD,QAAQ,GAC/C3C,QAAQC,IAAIH,EAAIC,IACJH,EAAAA,EAAAA,SAJC,GAIKa,EAAaX,EAAKC,IAGlC8C,UAAUC,YACZD,UAAUC,YAAYC,mBAAmBR,GAEzCS,MAAM","file":"src.a244737c.js","sourceRoot":"..\\src","sourcesContent":["const API_KEY = \"b8aa6b77e85dc3ac3f6db7694ca0e9ea\";\r\n\r\nconst getCityData = (city = '', lat = 9.08 , long = 8.68) => {\r\n  let url \r\n  if (city !== '') {\r\n    url = `//api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`;\r\n  } else {\r\n    url = `//api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&appid=${API_KEY}&units=metric`;\r\n  }\r\n  console.log(url)\r\n  return new Promise((res, err) => {\r\n    fetch(url)\r\n      .then(res => res.json())\r\n      .then(res)\r\n      .catch(err);\r\n  });\r\n};\r\n\r\nconst getCityInfo = (city, displayData, lat, long,) => {\r\n  getCityData(city, lat, long)\r\n    .then(displayData)\r\n    .catch((err) => {\r\n      console.log(err,\"City not Found!!!\");\r\n    });\r\n};\r\n\r\nexport default getCityInfo;","import './styles/style.css' \r\nimport getCityInfo from \"./getWeather\";\r\n\r\ndocument.getElementById(\"city_input\").value = '';\r\n\r\nconst displayData = obj => {\r\n  const dataObj = obj;\r\n  document.getElementById(\"deg\").innerHTML = Math.round(obj.main.temp);\r\n  document.getElementById(\"location\").innerHTML = obj.name;\r\n  document.getElementById('weather_icon').setAttribute('src', `http://openweathermap.org/img/wn/${obj.weather[0].icon}.png`)\r\n  document.getElementById('weather_description').innerHTML =  obj.weather[0].description;\r\n  document.getElementById(\"cloudy\").innerHTML = `${obj.clouds.all}%`;\r\n  document.getElementById(\"humidity\").innerHTML = `${obj.main.humidity}%`;\r\n  document.getElementById(\"wind\").innerHTML = `${obj.wind.speed}km/h`;\r\n  console.log(dataObj);\r\n  return dataObj;\r\n};\r\n\r\nconst getCity = () => {\r\n  const city = document.getElementById(\"city_input\").value;\r\n  getCityInfo(city, displayData);\r\n  //console.log(cityInfo);\r\n};\r\n\r\n/* CLICKING OF THE SERCH BUTTON */\r\nconst searchBtn = document.getElementById(\"search\");\r\nsearchBtn.addEventListener(\"click\", getCity);\r\n\r\n/* CLICKING OF THE SUGGESTED LOCATIONS */\r\nconst suggestedLocation = document.querySelectorAll(\".suggested-location li\");\r\nsuggestedLocation.forEach(li => {\r\n  li.addEventListener(\"click\", e => {\r\n    const value = e.target.innerHTML;\r\n    getCityInfo(value, displayData);\r\n  });\r\n});\r\n\r\n/* GETTING USER LOCATION */\r\n/* const getLocation = () => {\r\n  \r\n}; */\r\nconst getLocationByCords = (position)=>{\r\n  const city = '';\r\n  const lat = position.coords.latitude.toFixed(2);\r\n  const long = position.coords.longitude.toFixed(2);\r\n  console.log(lat,long)\r\n  getCityInfo(city, displayData, lat, long,);\r\n}\r\n\r\nif (navigator.geolocation) {\r\n  navigator.geolocation.getCurrentPosition(getLocationByCords);\r\n} else {\r\n  alert(\"Geolocation is not supported by this browser or is disabled.\");\r\n}\r\n"]}